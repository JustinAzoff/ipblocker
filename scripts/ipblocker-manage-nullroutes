#!/usr/bin/python

from ipblocker import model, logger
from cisco.ciscolib import login
from ipblocker.config import config
import time

try :
    import mymemcache
except ImportError:
    mymemcache = None

IP = config.get("nullrouter","ip")

cisco_connection = None

def get_cisco():
    global cisco_connection
    if cisco_connection:
        return cisco_connection
    
    logger.debug("Logging into router")
    cisco_connection = c = login(IP)
    if not cisco_connection:
        logger.error("Unable to login to router")
        raise Exception("Unable to login to router")
    logger.debug("Done logging into router")
    return c

def unblock():
    unblock_pending = model.get_unblock_pending()
    if not unblock_pending:
        return

    c = get_cisco()
    current = set(c.nullroute_list())
    to_unblock = {}
    for b in unblock_pending:
        to_unblock[b.ip] = b
        if b.ip not in current:
            logger.warning("already unblocked %s, unblocking anyway" % b.ip)
        else:
            logger.info("unblocking %s" % b.ip)

    if not to_unblock:
        return

    c.nullroute_remove_many(to_unblock.keys())
    current = set(c.nullroute_list())

    for b in to_unblock.values():
        if b.ip not in current:
            b.set_unblocked()
        else:
            logger.error("error unblocking %s" % b.ip)

    out = c.write_mem()
    out = ' '.join(out)
    logger.info("write mem: %s" % out)

def block():
    block_pending = model.get_block_pending()
    if not block_pending:
        return
    c = get_cisco()
    current = set(c.nullroute_list())
    to_block = {}
    for b in block_pending:
        to_block[b.ip] = b
        if b.ip not in current:
            logger.info("blocking %s" % b.ip)
        else:
            logger.warning("already blocked %s, blocking anyway" % b.ip)

    if not to_block:
        return

    c.nullroute_add_many(to_block.keys())
    current = set(c.nullroute_list())

    for b in to_block.values():
        if b.ip in current:
            b.set_blocked()
        else:
            logger.error("error blocking %s" % b.ip)

def main():
    model.Session.clear()
    try:
        unblock()
    except Exception, e:
        logger.error("error unblocking %s" % e)

    try:
        block()
    except Exception, e:
        logger.error("error blocking %s" % e)

    if cisco_connection:
        logger.debug("Logging out of router")
        cisco_connection.logout()

    if mymemcache:
        mc = mymemcache.Client(timeout=60*60)
        mc['ipblocker:last_manager_runtime'] = time.ctime()
    model.engine.dispose()


if __name__ == "__main__":
    main()
