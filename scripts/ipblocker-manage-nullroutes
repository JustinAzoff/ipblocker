#!/usr/bin/python

from ipblocker import model, logger
from ipblocker.fake_ciscolib import login
import mymemcache
import time

def unblock(c):
    current = set(c.nullroute_list())
    to_unblock = {}
    for b in model.get_unblock_pending():
        if b.ip in current:
            to_unblock[b.ip] = b
            logger.info("unblocking %s" % b.ip)
        else:
            logger.warning("already unblocked %s" % b.ip)
            b.set_unblocked()

    if not to_unblock:
        return

    c.nullroute_remove_many(to_unblock.keys())
    current = set(c.nullroute_list())

    for b in to_unblock.values():
        if b.ip not in current:
            b.set_unblocked()
        else:
            logger.error("error unblocking %s" % b.ip)

def block(c):
    current = set(c.nullroute_list())
    to_block = {}
    for b in model.get_block_pending():
        if b.ip not in current:
            to_block[b.ip] = b
            logger.info("blocking %s" % b.ip)
        else:
            logger.warning("already blocked %s" % b.ip)
            b.set_blocked()

    if not to_block:
        return

    c.nullroute_add_many(to_block.keys())
    current = set(c.nullroute_list())

    for b in to_block.values():
        if b.ip in current:
            b.set_blocked()
        else:
            logger.error("error blocking %s" % b.ip)

def main():
    model.Session.clear()
    logger.debug("Logging into router")
    c = login('')
    logger.debug("Done logging into router")
    try:
        unblock(c)
    except Exception, e:
        logger.error("error unblocking %s" % e)

    try:
        block(c)
    except Exception, e:
        logger.error("error blocking %s" % e)

    mc = mymemcache.Client(timeout=60*60)
    mc['ipblocker:last_manager_runtime'] = time.ctime()


if __name__ == "__main__":
    main()
