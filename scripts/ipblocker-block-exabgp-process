#!/usr/bin/env python

from ipblocker import model
from ipblocker.config import config

import socket
import os
import subprocess
import time
import sys
import signal
import random

def make_route(b):
    if ':' not in b.ip:
        next_hop = "192.168.127.1"
    else:
        next_hop = "2001:DB8::DEAD:BEEF"

    return "route %s next-hop %s community [ no-export ]" % (b.ip, next_hop)

def update(action, b):
    route = make_route(b)
    sys.stdout.write(action + " " + route + "\n")
    sys.stdout.flush()

def announce(b):
    update("announce", b)

def withdraw(b):
    update("withdraw", b)

def main():
    while True:
        signal.alarm(10)
        block_pending   = model.get_block_pending()
        unblock_pending = model.get_unblock_pending()
        signal.alarm(10)

        for b in block_pending:
            announce(b)

        for b in unblock_pending:
            withdraw(b)

        for b in block_pending:
            signal.alarm(10)
            b.set_blocked()

        for b in unblock_pending:
            signal.alarm(10)
            b.set_unblocked()
        signal.alarm(0)

        random_sleep = random.randint(850,1000)/1000.0
        if random.random() < 1/20.0:
            random_sleep -= 0.5
        time.sleep(random_sleep)

if __name__ == "__main__":
    main()
