#!/usr/bin/env python
from ipblocker import model
import sys
import os

def save(fn, s):
    nfn = fn + '.new'
    f = open(nfn, 'w')
    f.write(s)
    os.fsync(f.fileno())
    f.close()
    os.rename(nfn, fn)

def main(output_file, flagged=False, dest_only=False, base_filter=None):
    """Generate nfdump filter like
    (base filter)        AND ((single filter                ) OR (cidr filter))
    (not net 1.1.1.0/24) AND ((dst host in [4.4.4.4 3.3.3.3]) OR (dst net 1.2.3.0/24 or dst net 1.2.2.0/24))
    """
    bf = ""
    if base_filter:
        bf = "(%s) AND" % (base_filter)

    single = []
    cidr = []
    sf = cf = ''
    filters = []
    seen = set()
    for b in model.Block.query.filter(model.and_(model.Block.unblock_now==False, model.Block.flag_traffic==True)).order_by(model.Block.entered):
        if b.ip in seen: continue
        seen.add(b.ip)

        if (flagged == False or b.flag_traffic) or ('portal' in b.who and b.flag_traffic):
            if '/' in b.ip:
                cidr.append(b.ip)
            else:
                single.append(b.ip)

    if single:
        if dest_only:
            sf += "(dst host in [%s])" % ' '.join(single)
        else:
            sf += "(host in [%s])"     % ' '.join(single)
        filters.append(sf)
    if cidr:
        if dest_only:
            cf += "(dst net %s)" % ' or dst net '.join(cidr)
        else:
            cf += "(net %s)"     % ' or net '.join(cidr)
        filters.append(cf)

    #base filter + single filter + cidr filter
    filter = "%s (%s)\n" % (bf, ' OR '.join(filters))

    save(output_file, filter)
    model.disconnect()

if __name__ == "__main__":
    from optparse import OptionParser
    parser = OptionParser(usage="usage: %prog [options] /path/to/filter.txt")
    parser.add_option("-f", "--flagged",  dest="flagged", action="store_true",
        help="create a filter for only the 'flagged' ips",default=False)
    parser.add_option("-d", "--dest_only",  dest="dest_only", action="store_true",
        help="restrict the filter to only match outbound traffic to a blocked IP",default=False)
    parser.add_option("-b", "--base-filter",  dest="base_filter", action="store",
        help="base filter to be applied. for example: 'not host 1.2.3.4'",default=False)
    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.print_help()
        sys.exit(1)

    fn = args[0]
    main(fn, options.flagged, options.dest_only, options.base_filter)
