#!/usr/bin/env python
# nfdump-flow-notify
# Copyright (C) 2010 Justin Azoff JAzoff@uamail.albany.edu
#
# This module is released under the MIT License:
# http://www.opensource.org/licenses/mit-license.php

import pynfdump

import sys

import smtplib

from ipblocker import model

def unique(data):
    seen = set()
    for x in data:
        if x not in seen:
            yield x
            seen.add(x)

def get_report_txt(fn, filter):
    result = list(pynfdump.search_file(fn, filterfile=filter))
    if not result:
        return

    ips={}
    dests={}

    out  = "Subject: Traffic to blocked hosts\n\n"
    out += "Traffic to blocked hosts detected:\n\n"

    for rec in result:
        ips.setdefault(rec['srcip'],[]).append(rec)
        ip = str(rec['dstip'])
        if ip not in dests:
            b = model.get_ip(ip)[0]
            blocked_str = b.unblocked and 'not blocked' or 'blocked'
            dests[ip] = "%-15s | State: %s | %s | %s | %s" % (ip, blocked_str, b.who, b.entered.strftime("%Y-%m-%d"), b.comment)


    for ip,recs in ips.items():
        for dst in unique(rec['dstip'] for rec in recs):
            out += "%s\n" % dests[str(dst)]
        out += "\n"
        out += "%s\n" % ip
        for rec in recs:
            out += " %(first)s %(prot)s %(srcip)s:%(srcport)s -> %(dstip)s:%(dstport)s %(packets)s %(bytes)s\n" % rec
        out += "\n\n\n"

    return out


def export_file(notify, fn, filter):
    txt = get_report_txt(fn, filter)
    if txt:
        txt = "To: %s\n%s" % (', '.join(notify), txt)
        s = smtplib.SMTP("localhost")
        s.sendmail("root@datacomm.albany.edu", notify, txt)

def main():
    import sys
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option("-i", "--filter",    dest="filter",     action="store",  help="filter file")
    parser.add_option("-f", "--file",      dest="file",       action="store",  help="single file")
    parser.add_option("-n", "--notify",    dest="notify",     action="append", help="email addresses to notify")

    (options, args) = parser.parse_args()

    o = options

    if not o.notify or not o.file:
        parser.print_help()
        sys.exit(1)

    return export_file(o.notify, o.file, o.filter)

if __name__ == "__main__":
    main()
